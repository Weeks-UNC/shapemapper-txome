#!/usr/bin/env python

# tested with:
# kallisto 0.44.0 
# samtools 1.2 and 1.8
# sort (GNU coreutils) 8.21  and 8.22
# python 2.7.6 and 2.7.15

# fully testing job wrapper interface would require some docker finesse - 
# not sure how easy it is to spin up a simple starcluster, LSF, or SLURM system, since
# they usually involve multiple nodes

import datetime

start_time = datetime.datetime.now()

import sys, os

from scripts.logger import Logger
from scripts.job_wrapper import stage
from scripts.shapemapper_wrapper import fmt_shapemapper_cmds
from scripts.parse_args import parse_args
from scripts.util import timestamp, makedirs
from scripts.globals import god

THIS_DIR = os.path.split(os.path.realpath(__file__))[0]

try:
    sys.argv[1:].index('--test')
    args = '''
            --paired
            --modified test_data/modified_10k
            --untreated test_data/untreated_10k
            --multimapper-mode first
            --platform local
            --min-reads 10
            --max-files-per-folder 2
            --out test
            --target test_data/16S.fa
                     test_data/23S.fa
                     test_data/TPP.fa
                     test_data/U1.fa
                     test_data/16S_dup.fa
                     test_data/16S_dup2.fa
            '''.strip().split()
    args += ['--shapemapper-args', '--random-primer-len 9']
except ValueError:
    args = sys.argv[1:]

p = parse_args(args)

outlog_path = p.out + "/" + "kallisto-txome_log.txt"
outlog = Logger(outlog_path,
                sys.stdout)
# override stdout and stderr globally to redirect through logger
sys.stdout = outlog
sys.stderr = outlog

s = "Started kallisto-txome at {}".format(timestamp())
print('#' * len(s))
print(s)
print("arguments = {}".format(p))
print("Will write all output to {}.".format(p.out))
makedirs(p.out)

# parameters used in job_wrapper.py functions
god.platform = p.platform
god.max_jobs = p.max_jobs
god.bsub_opts = "-n{} -R span[hosts=1]".format(p.nproc)

# -----------------------------------------------------------------------------
# check fasta target names for characters that don't play nicely with bowtie2
# and/or bbmerge
dir = p.out + "/fasta_check"
cmd = (
    '{THIS_DIR}/scripts/check_fasta_names.py '
    '--target {target} '
).format(THIS_DIR=THIS_DIR,
         dir=dir,
         target=' '.join(p.target))
stage(name="checking fasta target names",
      dir=dir,
      done=dir + "/fasta_check_done",
      cmd=cmd)

# -----------------------------------------------------------------------------
# generate kallisto index
dir = p.out + "/kallisto_index"
cmd = 'kallisto index -i {dir}/index {target}'.format(dir=dir,
                                                      target=' '.join(p.target))
stage(name="kallisto index building",
      dir=dir,
      done=dir + "/kallisto_index_building_done",
      cmd=cmd)

# -----------------------------------------------------------------------------
# run pseudomapping
prev_dir = dir
dir = p.out + "/kallisto_pseudomap"
extra_flags = '--single --fragment-length {fragment_length} --sd {fragment_sd}'
extra_flags = extra_flags.format(fragment_length=p.fragment_length,
                                 fragment_sd=p.fragment_sd)
if p.paired:
    extra_flags = ''
cmds = []
for sample in p.input_files.keys():
    if len(p.input_files[sample]) == 0:
        continue
    cmd = ('kallisto quant -i "{prev_dir}/index" --pseudobam --plaintext '
           '--threads {threads} '
           '-o "{dir}/{sample}" {inputs} {extra_flags}')
    cmd = cmd.format(dir=dir,
                     prev_dir=prev_dir,
                     target=' '.join(p.target),
                     sample=sample,
                     inputs=' '.join(['"{}"'.format(f) for f in p.input_files[sample]]),
                     extra_flags=extra_flags,
                     threads=p.nproc)
    cmds.append(cmd)

stage(name="kallisto pseudomapping to targets",
      dir=dir,
      done=dir + "/kallisto_pseudomapping_done",
      cmds=cmds)

kallisto_dir = dir

# --------------------------------------------------------------------------------
# identify transcripts above some potential coverage or total read count threshold
dir = p.out + "/select_targets"
id_file = "{dir}/selected_ids.txt".format(dir=dir)
cmd = (
    '{THIS_DIR}/scripts/select_targets.py '
    '--in {input_args} '
    '--out "{id_file}" '
    '--min-reads {min_reads} '
    '--min-mean-coverage {min_mean_coverage} '
    '--frag-len {frag_len} '
)
input_args = ''
for sample in p.input_files.keys():
    if len(p.input_files[sample]) == 0:
        continue
    input_args += (
        '"{kallisto_dir}/{sample}/abundance.tsv" '.format(
            kallisto_dir=kallisto_dir, sample=sample
        )
    )
cmd = cmd.format(
    THIS_DIR=THIS_DIR,
    dir=dir,
    input_args=input_args,
    min_reads=p.min_reads,
    min_mean_coverage=p.min_mean_coverage,
    frag_len=p.fragment_length,
    id_file=id_file,
)

stage(name="target coverage selection",
      dir=dir,
      done=dir + "/target_coverage_selection_done",
      cmd=cmd)

# -----------------------------------------------------------------------------
# generate fasta with selected transcripts only,
# folder hierarchy of individual files and a file indexing
# those paths by target name
dir = p.out + "/filter_targets"
cmd = (
    '{THIS_DIR}/scripts/filter_targets.py '
    '--id-file "{id_file}" '
    '--target {target} '
    '--out "{dir}/selected_targets.fa" '
    '--out-dir "{dir}/single_seqs" '
    '--out-fasta-paths "{fasta_locations_file}" '
    '--max-files-per-folder {max_files_per_folder}'
)

fasta_locations_file = '{dir}/fasta_locations.txt'.format(dir=dir)
cmd = cmd.format(
    THIS_DIR=THIS_DIR,
    dir=dir,
    target=' '.join(['"{}"'.format(f) for f in p.target]),
    id_file=id_file,
    fasta_locations_file=fasta_locations_file,
    max_files_per_folder=p.max_files_per_folder,
)

stage(name="target filtering",
      dir=dir,
      done=dir + "/target_filtering_done",
      cmd=cmd)

# -----------------------------------------------------------------------------
# convert bam to SAM for simpler parsing
dir = p.out + "/convert_sam"
cmds = []
for sample in p.input_files.keys():
    if len(p.input_files[sample]) == 0:
        continue
    cmd = (
        'mkdir -p "{{dir}}/{{sample}}" '
        '&& '
        'samtools view -h -o "{output}" "{input}"'
    )
    cmd = cmd.format(
        output="{dir}/{sample}/pseudoalignments.sam",
        input="{kallisto_dir}/{sample}/pseudoalignments.bam"
    )
    cmd = cmd.format(kallisto_dir=kallisto_dir,
                     dir=dir,
                     sample=sample)
    cmds.append(cmd)

stage(name="SAM conversion",
      dir=dir,
      done=dir + "/sam_conversion_done",
      cmds=cmds)

sam_dir = dir

# -------------------------------------------------------------------------------------
# handle reads pseudomapping to multiple targets and exclude headers and unmapped reads
dir = p.out + "/multimapper_processed_sam"
cmds = []
for sample in p.input_files.keys():
    if len(p.input_files[sample]) == 0:
        continue
    cmd = (
        'mkdir -p "{{dir}}/{{sample}}" '
        '&& '
        '{{THIS_DIR}}/scripts/filter_multimappers.py '
        '--in "{input}" '
        '--out "{output}" '
        '--multimapper-mode {multimapper_mode}'
    )
    cmd = cmd.format(
        output="{dir}/{sample}/pseudoalignments.sam",
        input="{sam_dir}/{sample}/pseudoalignments.sam",
        multimapper_mode=p.multimapper_mode,
    )
    cmd = cmd.format(THIS_DIR=THIS_DIR,
                     dir=dir,
                     sam_dir=sam_dir,
                     sample=sample)
    cmds.append(cmd)

stage(name="multimapper handling",
      dir=dir,
      done=dir + "/multimapper_handling_done",
      cmds=cmds)

processed_sam_dir = dir

# -----------------------------------------------------------------------------
# sort SAM files by pseudomapped target
dir = p.out + "/target_sorted_sam"
cmds = []
for sample in p.input_files.keys():
    if len(p.input_files[sample]) == 0:
        continue
    cmd = (
        'mkdir -p "{{dir}}/{{sample}}" '
        '&& '
        'sort --stable '
        '-k 3,3 '
        '-o "{output}" '
        '"{input}"'
    )
    cmd = cmd.format(
        output="{dir}/{sample}/pseudoalignments.sam",
        input="{processed_sam_dir}/{sample}/pseudoalignments.sam",
    )
    cmd = cmd.format(processed_sam_dir=processed_sam_dir,
                     dir=dir,
                     sample=sample)
    cmds.append(cmd)

stage(name="SAM sorting",
      dir=dir,
      done=dir + "/sam_sorting_done",
      cmds=cmds)

sorted_sam_dir = dir

# -----------------------------------------------------------------------------
# split sam file(s) into FASTQ or pairs of FASTQ files for each selected target transcript
dir = p.out + "/fastq_by_target"
cmds = []
paired_arg = '--unpaired'
if p.paired:
    paired_arg = '--paired'
for sample in p.input_files.keys():
    if len(p.input_files[sample]) == 0:
        continue
    cmd = (
        'mkdir -p "{{dir}}/{{sample}}" '
        '&& '
        '{{THIS_DIR}}/scripts/split_sam_to_fastqs.py '
        '--in "{input}" '
        '--selected-target-ids "{id_file}" '
        '--out "{output}" '
        '{paired_arg} '
        '--max-files-per-folder {max_files_per_folder}'
    )
    cmd = cmd.format(
        output="{dir}/{sample}",
        id_file=id_file,
        input="{sorted_sam_dir}/{sample}/pseudoalignments.sam",
        paired_arg=paired_arg,
        max_files_per_folder=p.max_files_per_folder,
    )
    cmd = cmd.format(sorted_sam_dir=sorted_sam_dir,
                     THIS_DIR=THIS_DIR,
                     dir=dir,
                     sample=sample)
    cmds.append(cmd)

stage(name="SAM to FASTQ conversion and splitting",
      dir=dir,
      done=dir + "/fastq_conversion_done",
      cmds=cmds)

fastq_dir = dir

# -----------------------------------------------------------------------------
# run shapemapper on each batch of reads and associated target sequence
dir = p.out + "/shapemapper"
done = dir + "/shapemapper_done"

cmds = fmt_shapemapper_cmds(
    dir=dir,
    fasta_locations_file=fasta_locations_file,
    input_files=p.input_files,
    fastq_dir=fastq_dir,
    paired=p.paired,
    nproc=p.nproc,
    shapemapper_args=p.shapemapper_args,
    max_files_per_folder=p.max_files_per_folder,
)

stage(name="ShapeMapper",
      dir=dir,
      done=done,
      cmds=cmds)

# -----------------------------------------------------------------------------
end_time = datetime.datetime.now()
delta = end_time - start_time
hours, remain = divmod(delta.seconds, 3600)
minutes, seconds = divmod(remain, 60)
print("\nkallisto-txome completed. Total turnaround time {} hours, {} minutes, {} seconds".format(
    hours, minutes, seconds))
